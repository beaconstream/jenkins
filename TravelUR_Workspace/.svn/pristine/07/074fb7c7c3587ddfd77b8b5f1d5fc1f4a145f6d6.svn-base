package com.travelur.signedinhome;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.design.widget.BottomNavigationView;
import android.support.design.widget.CoordinatorLayout;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.FileProvider;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.Toolbar;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.travelur.R;
import com.travelur.alerts.Alert;
import com.travelur.apploading.StartupScreen;
import com.travelur.backend.VolleyRequest;
import com.travelur.friends.Friends;
import com.travelur.friends.YourFriends;
import com.travelur.general.BaseActivity;
import com.travelur.helper.SQLiteHandler;
import com.travelur.helper.SessionManager;
import com.travelur.messages.Messages;
import com.travelur.utility.AppConfig;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

/*
 * @author by Abhijit.
 */

public class MainActivity extends BaseActivity implements NavigationDrawerFragment.DrawerListener, View.OnClickListener {
    NavigationDrawerFragment navigationDrawerFragment;
    TextView layout_Title;
    //ImageView profile_icon;
    Button sign_out;
    Toolbar toolbar;
    FragmentManager fragmentManaager;
    FragmentTransaction trans;
    Fragment newFragment;
    DrawerLayout drawerLayout;
    private ActionBarDrawerToggle mDrawerToggle;
    private SearchView searchView;
    private SessionManager session;
    private SQLiteHandler db;
    private CoordinatorLayout coordinatorLayout;
    // LogCat tag
    private static final String TAG = MainActivity.class.getSimpleName();
    private TextView shareIt_close, shareIt_action_bar_title, write_post_shareit, shareIt, shareWith, shareIt_globe_ttf, shareIt_uploadedImage_close, shareIt_camera_ttf, shareIt_location_ttf, shareIt_emoji_ttf;
    private EditText shareIt_message;
    private Spinner shareIt_spinner;
    private ImageView shareIt_profilePic, shareIt_uploadedImage;
    private View shareItLayout;
    private List<String> IMAGEPTHLIST = new ArrayList<>();
    private String message;
    // Display popup attached to the button as a position anchor
    TextView groups, moreTextView_groups, destination, moreTextView_destination, rewards, moreTextView_rewards, alerts, moreTextView_alerts;

    TextView shareIt_camera, shareItTextView_camera, shareIt_gallery, shareItTextView_gallery, shareIt_video, shareItTextView_video;

    // Camera activity request codes
    private static final int CAMERA_CAPTURE_IMAGE_REQUEST_CODE = 100;
    private static final int CAMERA_CAPTURE_VIDEO_REQUEST_CODE = 200;

    public static final int MEDIA_TYPE_IMAGE = 1;
    public static final int MEDIA_TYPE_VIDEO = 2;

    //static final int REQUEST_TAKE_PHOTO = 1;

    private Uri fileUri; // file url to store image/video

    Fragment selectedFragment = null;
    static final int PICK_IMAGE_REQUEST = 1;
    String filePath;
    private String mCurrentPhotoPath;
    private boolean isImage_data;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        layout_Title = (TextView) findViewById(R.id.action_bar_title_1);
        //profile_icon = (ImageView) findViewById(R.id.profile_icon);
        coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinatorLayout);
        toolbar= (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        shareItLayout = findViewById(R.id.write_post_shareIt);
        shareIt_close = (TextView) shareItLayout.findViewById(R.id.write_post_close);
        write_post_shareit = (TextView) shareItLayout.findViewById(R.id.write_post_shareit);
        shareIt = (TextView) shareItLayout.findViewById(R.id.shareIt_message);
        shareIt_action_bar_title = (TextView) shareItLayout.findViewById(R.id.shareIt_action_bar_title);
        shareWith = (TextView) shareItLayout.findViewById(R.id.shareWith);
        shareIt_globe_ttf = (TextView) shareItLayout.findViewById(R.id.globe);
        shareIt_uploadedImage_close = (TextView) shareItLayout.findViewById(R.id.write_post_uploadedImage_close);
        shareIt_camera_ttf = (TextView) shareItLayout.findViewById(R.id.shareIt_camera);
        shareIt_location_ttf = (TextView) shareItLayout.findViewById(R.id.shareIt_location);
        shareIt_emoji_ttf = (TextView) shareItLayout.findViewById(R.id.shareIt_emoji);
        shareIt_message = (EditText) shareItLayout.findViewById(R.id.shareIt_message);
        shareIt_profilePic = (ImageView) shareItLayout.findViewById(R.id.shareIt_profilePic);
        //shareIt_uploadedImage = (ImageView) shareItLayout.findViewById(R.id.write_post_uploadedImage);
        shareIt_globe_ttf.setTypeface(font);
        shareIt_close.setTypeface(font);
        shareIt_camera_ttf.setTypeface(font);
        shareIt_location_ttf.setTypeface(font);
        shareIt_emoji_ttf.setTypeface(font);
        shareIt.setTypeface(font_Raleway_ExtraLight);
        shareIt_action_bar_title.setTypeface(font_Raleway_Light);
        shareWith.setTypeface(font_Raleway_Light);
        write_post_shareit.setTypeface(font_Raleway_ExtraLight);

        shareIt_camera_ttf.setOnClickListener(this);
        shareIt_location_ttf.setOnClickListener(this);
        shareIt_emoji_ttf.setOnClickListener(this);
        write_post_shareit.setOnClickListener(this);
        shareIt_message.setOnClickListener(this);
        /*getSupportActionBar().setDisplayShowHomeEnabled(false);
        getSupportActionBar().setHomeButtonEnabled(false);*/
        shareIt_message.setFocusable(true);
        shareIt_message.requestFocus();

        // SQLite database handler
        db = new SQLiteHandler(getApplicationContext());
        // Session manager
        session = new SessionManager(getApplicationContext());

        fragmentManaager=getSupportFragmentManager();
        trans = fragmentManaager.beginTransaction();
        drawerLayout=(DrawerLayout) findViewById(R.id.drawer_layout);
        sign_out = (Button) findViewById(R.id.sign_out);
        intitialiseFirstFragment();
        navigationDrawerFragment=(NavigationDrawerFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);
        navigationDrawerFragment.setUp(R.id.fragment_navigation_drawer,drawerLayout,toolbar);

        sign_out.setOnClickListener(this);

        toolbar.post(new Runnable() {
            @Override
            public void run() {
                Drawable d = ResourcesCompat.getDrawable(getResources(), R.drawable.profile_pic_circular, null);
                toolbar.setNavigationIcon(d);
            }
        });

        //Check User Logged in Session then Display user details
        if(session.isLoggedIn())
        {
            if(!session.isLoggedInFirstTime()){
                session.setFirstTimeLoginStatus(true);
            }
            // Fetching user details from sqlite
            HashMap<String, String> user = db.getUserDetails();

            String status = user.get("status");
            String user_id = user.get("user_id");
            String first_name = user.get("first_name");
            String last_name = user.get("last_name");

            AppConfig.setUser_id(user_id);
            // Displaying the user details on the screen
            /*txtName.setText(name);
            txtEmail.setText(email);*/
        }else if(session.isGuestLoggedIn()){
            if(!session.isLoggedInFirstTime()){
                session.setFirstTimeLoginStatus(true);
            }
            // Fetching user details from sqlite
            HashMap<String, String> user = db.getUserDetails();

            String status = user.get("status");
            String user_id = user.get("user_id");
            String first_name = user.get("first_name");
            String last_name = user.get("last_name");

            AppConfig.setUser_id(user_id);
        }


        final BottomNavigationView bottomNavigationView = (BottomNavigationView)
                findViewById(R.id.navigation);
       /* bottomNavigationView.getMenu().findItem(R.id.action_item1).setIcon(
                new IconDrawable(getApplicationContext(), FontAwesomeIcons.fa_home)
                        .colorRes(R.color.vpi__bright_foreground_disabled_holo_dark)
                        .actionBarSize());
        bottomNavigationView.getMenu().findItem(R.id.action_item2).setIcon(
                new IconDrawable(getApplicationContext(), FontAwesomeIcons.fa_users)
                        .colorRes(R.color.vpi__bright_foreground_disabled_holo_dark)
                        .actionBarSize());
        bottomNavigationView.getMenu().findItem(R.id.action_item3).setIcon(
                new IconDrawable(getApplicationContext(), FontAwesomeIcons.fa_comments)
                        .colorRes(R.color.vpi__bright_foreground_disabled_holo_dark)
                        .actionBarSize());
        bottomNavigationView.getMenu().findItem(R.id.action_item4).setIcon(
                new IconDrawable(getApplicationContext(), FontAwesomeIcons.fa_book)
                        .colorRes(R.color.vpi__bright_foreground_disabled_holo_dark)
                        .actionBarSize());
        bottomNavigationView.getMenu().findItem(R.id.action_item5).setIcon(
                new IconDrawable(getApplicationContext(), FontAwesomeIcons.fa_navicon)
                        .colorRes(R.color.vpi__bright_foreground_disabled_holo_dark)
                        .actionBarSize());*/

        bottomNavigationView.setOnNavigationItemSelectedListener
                (new BottomNavigationView.OnNavigationItemSelectedListener() {
                    @Override
                    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                        switch (item.getItemId()) {
                            case R.id.action_item1:
                                selectedFragment = SignedInHome.newInstance();
                                intitialiseSelectedFragment(selectedFragment);
                                layout_Title.setVisibility(View.GONE);
                                break;
                            case R.id.action_item2:
                                //selectedFragment = Friends.newInstance();
                                selectedFragment = YourFriends.newInstance();
                                intitialiseSelectedFragment(selectedFragment);
                                layout_Title.setVisibility(View.VISIBLE);
                                layout_Title.setText(R.string.Friends_Title);
                                layout_Title.setTypeface(font_Raleway_Light);
                                break;
                            case R.id.action_item3:
                                selectedFragment = Messages.newInstance();
                                intitialiseSelectedFragment(selectedFragment);
                                layout_Title.setVisibility(View.VISIBLE);
                                layout_Title.setText(R.string.Messages_Title);
                                layout_Title.setTypeface(font_Raleway_Light);
                                break;
                            case R.id.action_item4:
                                selectedFragment = Alert.newInstance();
                                intitialiseSelectedFragment(selectedFragment);
                                layout_Title.setVisibility(View.INVISIBLE);
                                break;
                            case R.id.action_item5:

                                View morePopUp = displayPopupWindow(getCurrentFocus());
                                groups = (TextView) morePopUp.findViewById(R.id.groups);
                                moreTextView_groups = (TextView) morePopUp.findViewById(R.id.moreTextView_groups);
                                destination = (TextView) morePopUp.findViewById(R.id.destinations);
                                moreTextView_destination = (TextView) morePopUp.findViewById(R.id.moreTextView_destinations);
                                rewards = (TextView) morePopUp.findViewById(R.id.rewards);
                                moreTextView_rewards = (TextView) morePopUp.findViewById(R.id.moreTextView_rewards);
                                alerts = (TextView) morePopUp.findViewById(R.id.alerts);
                                moreTextView_alerts = (TextView) morePopUp.findViewById(R.id.moreTextView_alerts);

                                groups.setTypeface(font);
                                moreTextView_groups.setTypeface(font_Raleway_Light);
                                destination.setTypeface(font);
                                moreTextView_destination.setTypeface(font_Raleway_Light);
                                rewards.setTypeface(font);
                                moreTextView_rewards.setTypeface(font_Raleway_Light);
                                alerts.setTypeface(font);
                                moreTextView_alerts.setTypeface(font_Raleway_Light);

                                break;
                            /*case R.id.action_item6:
                                selectedFragment = Alert.newInstance();
                                break;*/

                        }
                        // Manually checking internet connection
                        checkConnection();
                        return true;
                    }
                });

        //Manually displaying the first fragment - one time only
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        //transaction.setCustomAnimations(R.anim.slide_down, R.anim.slide_up);
        transaction.replace(R.id.frame, SignedInHome.newInstance());
        transaction.commit();

        //Used to select an item programmatically
        //bottomNavigationView.getMenu().getItem(2).setChecked(true);

    }

    public void intitialiseSelectedFragment(Fragment selectedFragment){

        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.frame, selectedFragment);
        transaction.commit();

    }
    public void intitialiseFirstFragment(){

        newFragment = new SignedInHome();
        trans.replace(R.id.frame, newFragment, newFragment.toString());
        trans.commit();
    }

    private void logoutUser() {
        session.setLogin(false);
        session.setGuestLogin(false);

        db.deleteUsers();

        // Launching the StartupScreen activity with login page or signin page
        Intent intent = new Intent(MainActivity.this, StartupScreen.class);
        startActivity(intent);
        finish();
    }

    @Override
    public void onDrawerItemClick(int id) {
        switch (id){
            case R.id.profile_layout:
                newFragment=new ProfileFragment();
                break;

        }
        fragmentManaager=getSupportFragmentManager();
        trans = fragmentManaager.beginTransaction();
        trans.replace(R.id.frame, newFragment, newFragment.toString());
        trans.commit();
        drawerLayout.closeDrawer(Gravity.LEFT);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case  R.id.sign_out:
                if(session.isLoggedIn() || session.isGuestLoggedIn()){
                    logoutUser();
                }
                break;
            case R.id.shareIt_message:

                break;
            case R.id.shareIt_camera:
                View morePopUpshareIt = displayPopupWindowSahreIt(getCurrentFocus());
                shareIt_camera = (TextView) morePopUpshareIt.findViewById(R.id.shareIt_camera);
                shareItTextView_camera = (TextView) morePopUpshareIt.findViewById(R.id.shareItTextView_camera);
                shareIt_gallery = (TextView) morePopUpshareIt.findViewById(R.id.shareIt_gallery);
                shareItTextView_gallery = (TextView) morePopUpshareIt.findViewById(R.id.shareItTextView_gallery);
                shareIt_video = (TextView) morePopUpshareIt.findViewById(R.id.shareIt_video);
                shareItTextView_video = (TextView) morePopUpshareIt.findViewById(R.id.shareItTextView_video);

                shareIt_camera.setTypeface(font);
                shareItTextView_camera.setTypeface(font_Raleway_Light);
                shareIt_gallery.setTypeface(font);
                shareItTextView_gallery.setTypeface(font_Raleway_Light);
                shareIt_video.setTypeface(font);
                shareItTextView_video.setTypeface(font_Raleway_Light);

                shareItTextView_camera.setOnClickListener(MainActivity.this);
                shareItTextView_gallery.setOnClickListener(MainActivity.this);
                shareItTextView_video.setOnClickListener(MainActivity.this);
                break;
            case  R.id.shareIt_location:

                break;
            case R.id.shareIt_emoji:

                break;
            case R.id.write_post_close:

                break;
            case R.id.write_post_shareit:
                message = shareIt_message.getText().toString();
                JSONObject jsonObject = new JSONObject();
                JSONArray jsonArray =  new JSONArray(IMAGEPTHLIST);
                try {
                    if(null!= AppConfig.getUser_id())
                    {
                        jsonObject.put(AppConfig.KEY_USER_ID, AppConfig.getUser_id());
                        jsonObject.put(AppConfig.KEY_IMAGEPATH, jsonArray);
                        jsonObject.put(AppConfig.KEY_MESSAGE, message);
                        jsonObject.put(AppConfig.KEY_WALL_ID, "1");
                        jsonObject.put(AppConfig.KEY_GROUP_ID, "1");
                        VolleyRequest volleyRequest = new VolleyRequest(getApplicationContext());
                        volleyRequest.signedInHome_Add_Post(jsonObject, isImage_data);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                break;
            case R.id.shareItTextView_camera:
                // Checking camera availability
                if (!isDeviceSupportCamera()) {
                    Toast.makeText(getApplicationContext(),
                            "Sorry! Your device doesn't support camera",
                            Toast.LENGTH_LONG).show();
                    // will close the app if the device does't have camera
                    finish();
                }else{
                    captureImage();
                }

                break;
            case  R.id.shareItTextView_gallery:
                imageBrowse();
                break;
            case R.id.shareItTextView_video:
                // Checking camera availability
                if (!isDeviceSupportCamera()) {
                    Toast.makeText(getApplicationContext(),
                            "Sorry! Your device doesn't support camera",
                            Toast.LENGTH_LONG).show();
                    // will close the app if the device does't have camera
                    finish();
                }else{
                    recordVideo();
                }
                break;
        }
    }

    /* @Override
     public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
         super.onPostCreate(savedInstanceState, persistentState);
         mDrawerToggle.syncState();
     }*/
    // Display popup attached to the button as a position anchor
    private View displayPopupWindow(View anchorView) {
        PopupWindow popup = new PopupWindow(MainActivity.this);
        View layout = LayoutInflater.from(MainActivity.this).inflate(R.layout.signinhome_more_popupcontent, null);
        popup.setContentView(layout);
        // Set content width and height
        popup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
        popup.setWidth(WindowManager.LayoutParams.MATCH_PARENT);
        // Closes the popup window when touch outside of it - when looses focus
        popup.setOutsideTouchable(true);
        popup.setFocusable(true);
        // Show anchored to button
        popup.setBackgroundDrawable(new BitmapDrawable());
        //popup.showAsDropDown(anchorView);
        popup.setAnimationStyle(R.anim.popup_anim);
        popup.showAtLocation(layout, Gravity.BOTTOM, 0, 250);


        View container = (View) popup.getContentView().getParent().getParent();
        WindowManager wm = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
        WindowManager.LayoutParams p = (WindowManager.LayoutParams) container.getLayoutParams();
        p.flags = WindowManager.LayoutParams.FLAG_DIM_BEHIND;
        p.dimAmount = 0.8f;
        wm.updateViewLayout(container, p);

        return layout;
    }
    // Display popup attached to the button as a position anchor
    private View displayPopupWindowSahreIt(View anchorView) {
        PopupWindow popup = new PopupWindow(MainActivity.this);
        View layout = LayoutInflater.from(MainActivity.this).inflate(R.layout.shareit_camera_popupcontent, null);
        popup.setContentView(layout);
        // Set content width and height
        popup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
        popup.setWidth(WindowManager.LayoutParams.MATCH_PARENT);
        // Closes the popup window when touch outside of it - when looses focus
        popup.setOutsideTouchable(true);
        popup.setFocusable(true);
        // Show anchored to button
        popup.setBackgroundDrawable(new BitmapDrawable());
        popup.setAnimationStyle(R.anim.popup_anim);
        popup.showAtLocation(layout, Gravity.BOTTOM, 0, 250);

        View container = (View) popup.getContentView().getParent().getParent();
        WindowManager wm = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
        WindowManager.LayoutParams p = (WindowManager.LayoutParams) container.getLayoutParams();
        p.flags = WindowManager.LayoutParams.FLAG_DIM_BEHIND;
        p.dimAmount = 0.8f;
        wm.updateViewLayout(container, p);

        return layout;
    }

    /**
     * Checking device has camera hardware or not
     * */
    private boolean isDeviceSupportCamera() {
        if (getApplicationContext().getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_CAMERA)) {
            // this device has a camera
            return true;
        } else {
            // no camera on this device
            return false;
        }
    }

    /**
     * Launching camera app to capture image
     */
    private void captureImage() {
        getOutputMediaFileUri(MEDIA_TYPE_IMAGE);
    }
    private void imageBrowse() {
        try {
            if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, PICK_IMAGE_REQUEST);
            } else {
                Intent galleryIntent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                // Start the Intent
                startActivityForResult(galleryIntent, PICK_IMAGE_REQUEST);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    // Get Path of selected image
    private String getPath(Uri contentUri) {
        String[] proj = {MediaStore.Images.Media.DATA};
        CursorLoader loader = new CursorLoader(getApplicationContext(), contentUri, proj, null, null, null);
        Cursor cursor = loader.loadInBackground();
        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        cursor.moveToFirst();
        String result = cursor.getString(column_index);
        cursor.close();
        return result;
    }
    public String getVideoPath(Uri uri) {
        int column_index = 0;
        String[] projection = {MediaStore.Images.Media.DATA};
        Cursor cursor = managedQuery(uri, projection, null, null, null);
        if (cursor != null) {
            column_index =    cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);
            cursor.moveToFirst();

        }
        return cursor.getString(column_index);
    }

    /**
     * Launching camera app to record video
     */
    private void recordVideo() {
        getOutputMediaFileUri(MEDIA_TYPE_VIDEO);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode)
        {
            case PICK_IMAGE_REQUEST:
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)
                {
                    Intent galleryIntent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                    startActivityForResult(galleryIntent, PICK_IMAGE_REQUEST);
                }
                else
                {
                    //do something like displaying a message that he didn`t allow the app to access gallery and you wont be able to let him select from gallery
                }

                break;
            case CAMERA_CAPTURE_IMAGE_REQUEST_CODE:
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)
                {
                    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                    // Ensure that there's a camera activity to handle the intent
                    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
                        // Create the File where the photo should go
                        File photoFile = null;
                        try {
                            photoFile = getOutputMediaFile(MEDIA_TYPE_IMAGE);
                        } catch (IOException ex) {
                            // Error occurred while creating the File
                        }
                        // Continue only if the File was successfully created
                        if (photoFile != null) {
                            Uri photoURI = FileProvider.getUriForFile(this,
                                    "com.travelur.fileprovider",
                                    photoFile);
                            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                            startActivityForResult(takePictureIntent, CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                        }
                    }
                }
                else
                {
                    //do something like displaying a message that he didn`t allow the app to access gallery and you wont be able to let him select from gallery
                }
                break;
            case CAMERA_CAPTURE_VIDEO_REQUEST_CODE:
                Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
                if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {
                    startActivityForResult(takeVideoIntent, CAMERA_CAPTURE_VIDEO_REQUEST_CODE);
                }
                break;
        }
    }

    /**
     * Here we store the file url as it will be null after returning from camera
     * app
     */
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        // save file url in bundle as it will be null on screen orientation
        // changes
        outState.putParcelable("file_uri", fileUri);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);

        // get the file url
        fileUri = savedInstanceState.getParcelable("file_uri");
    }



    /**
     * Receiving activity result method will be called after closing the camera
     * */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // if the result is capturing Image
        if (requestCode == CAMERA_CAPTURE_IMAGE_REQUEST_CODE && data!=null) {
            if (resultCode == RESULT_OK) {

                // successfully captured the image
                // launching upload activity
                //launchUploadActivity(true, data);


            } else if (resultCode == RESULT_CANCELED) {

                // user cancelled Image capture
                Toast.makeText(getApplicationContext(),
                        "User cancelled image capture", Toast.LENGTH_SHORT)
                        .show();

            } else {
                // failed to capture image
                Toast.makeText(getApplicationContext(),
                        "Sorry! Failed to capture image", Toast.LENGTH_SHORT)
                        .show();
            }

        } else if(requestCode == PICK_IMAGE_REQUEST){
            if (resultCode == RESULT_OK) {

                if(requestCode == PICK_IMAGE_REQUEST){

                    launchUploadActivity(true, data);

                   /* shareIt_uploadedImage.setVisibility(View.VISIBLE);
                    shareIt_uploadedImage_close.setVisibility(View.VISIBLE);
                    shareIt_uploadedImage.setImageURI(picUri);*/

                }else if (resultCode == RESULT_CANCELED) {

                    // user cancelled recording
                    Toast.makeText(getApplicationContext(),
                            "User cancelled picking up image", Toast.LENGTH_SHORT)
                            .show();

                } else {
                    // failed to record video
                    Toast.makeText(getApplicationContext(),
                            "Sorry! Failed to load image", Toast.LENGTH_SHORT)
                            .show();
                }

            }
        } else if (requestCode == CAMERA_CAPTURE_VIDEO_REQUEST_CODE) {
            if (resultCode == RESULT_OK) {
                Uri videoUri = data.getData();
                //mVideoView.setVideoURI(videoUri);
                launchUploadActivity(false, data);
            }else if (resultCode == RESULT_CANCELED) {

                // user cancelled recording
                Toast.makeText(getApplicationContext(),
                        "User cancelled video recording", Toast.LENGTH_SHORT)
                        .show();

            } else {
                // failed to record video
                Toast.makeText(getApplicationContext(),
                        "Sorry! Failed to record video", Toast.LENGTH_SHORT)
                        .show();
            }
        }
    }

    private void launchUploadActivity(boolean isImage, Intent data)
    {
        isImage_data = isImage;
        if(isImage){
            Uri picUri = data.getData();

            filePath = getPath(picUri);

            IMAGEPTHLIST.add(filePath);
        }else{
            Uri videoUri = data.getData();

            filePath = getVideoPath(videoUri);

            IMAGEPTHLIST.add(filePath);
        }
    }

    /**
     * ------------ Helper Methods ----------------------
     * */
    private void galleryAddPic() {
        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        File f = new File(mCurrentPhotoPath);
        Uri contentUri = Uri.fromFile(f);
        mediaScanIntent.setData(contentUri);
        this.sendBroadcast(mediaScanIntent);
    }
    /**
     * Creating file uri to store image/video
     */
    public void getOutputMediaFileUri(int type) {
        try {
            if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE }, CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
            } else {
                if(type == MEDIA_TYPE_IMAGE)
                {
                    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                    // Ensure that there's a camera activity to handle the intent
                    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
                        // Create the File where the photo should go
                        File photoFile = null;
                        try {
                            photoFile = getOutputMediaFile(type);
                        } catch (IOException ex) {
                            // Error occurred while creating the File
                        }
                        // Continue only if the File was successfully created
                        if (photoFile != null) {
                            Uri photoURI = FileProvider.getUriForFile(MainActivity.this,
                                    "com.travelur.fileprovider", photoFile);
                            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                            startActivityForResult(takePictureIntent, CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
                        }
                    }
                }else if(type == MEDIA_TYPE_VIDEO){
                    Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
                    if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {
                        startActivityForResult(takeVideoIntent, CAMERA_CAPTURE_VIDEO_REQUEST_CODE);
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * returning image / video
     */
    private File getOutputMediaFile(int type)throws IOException {

        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        String videoFileName = "MP4_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File mediaFile = null;
        if (type == MEDIA_TYPE_IMAGE) {
            mediaFile = File.createTempFile(
                    imageFileName,  /* prefix */
                    ".jpg",         /* suffix */
                    storageDir      /* directory */
            );
        }else if (type == MEDIA_TYPE_VIDEO) {
            mediaFile = File.createTempFile(
                    videoFileName,  /* prefix */
                    ".mp4",         /* suffix */
                    storageDir      /* directory */
            );
        }else{
            return  null;
        }
        // Save a file: path for use with ACTION_VIEW intents
        mCurrentPhotoPath = mediaFile.getAbsolutePath();
        return mediaFile;
    }
}
