package com.travelur.backend;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.bumptech.glide.Glide;
import com.bumptech.glide.disklrucache.DiskLruCache;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.travelur.R;
import com.travelur.helper.AppHelper;
import com.travelur.helper.SQLiteHandler;
import com.travelur.helper.SessionManager;
import com.travelur.travelconnect.settings.adapters.QuestionListAdapter;
import com.travelur.travelconnect.settings.models.AccountSettingsDataModel;
import com.travelur.travelconnect.settings.models.YourPreferencesDataModel;
import com.travelur.travelconnect.signedinhome.MainActivity;
import com.travelur.travelconnect.home.models.Home;
import com.travelur.travelconnect.profile.models.Profile;
import com.travelur.utility.AppConfig;
import com.travelur.utility.AppController;
import com.travelur.utility.GlideCircleTransformation;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.travelur.utility.AppConfig.BASE_URL;
import static com.travelur.utility.AppConfig.KEY_ADDRESS;
import static com.travelur.utility.AppConfig.KEY_CITY;
import static com.travelur.utility.AppConfig.KEY_COMMENT;
import static com.travelur.utility.AppConfig.KEY_CONFIRM_PASSWORD;
import static com.travelur.utility.AppConfig.KEY_COUNTRY_CODE;
import static com.travelur.utility.AppConfig.KEY_COUNTRY_NAME;
import static com.travelur.utility.AppConfig.KEY_DATE_OF_BIRTH;
import static com.travelur.utility.AppConfig.KEY_EMAIL;
import static com.travelur.utility.AppConfig.KEY_FIRST_NAME;
import static com.travelur.utility.AppConfig.KEY_GROUP_DESC;
import static com.travelur.utility.AppConfig.KEY_GROUP_ID;
import static com.travelur.utility.AppConfig.KEY_GROUP_NAME;
import static com.travelur.utility.AppConfig.KEY_HOME_AIRPORT;
import static com.travelur.utility.AppConfig.KEY_ID;
import static com.travelur.utility.AppConfig.KEY_IMAGE;
import static com.travelur.utility.AppConfig.KEY_IMAGEPATH;
import static com.travelur.utility.AppConfig.KEY_LASTNAME;
import static com.travelur.utility.AppConfig.KEY_LAST_NAME;
import static com.travelur.utility.AppConfig.KEY_MESSAGE;
import static com.travelur.utility.AppConfig.KEY_MOBILENO;
import static com.travelur.utility.AppConfig.KEY_NAME;
import static com.travelur.utility.AppConfig.KEY_PASSWORD;
import static com.travelur.utility.AppConfig.KEY_PHONE;
import static com.travelur.utility.AppConfig.KEY_PIN_CODE;
import static com.travelur.utility.AppConfig.KEY_STATE;
import static com.travelur.utility.AppConfig.KEY_TYPE;
import static com.travelur.utility.AppConfig.KEY_USERNAME;
import static com.travelur.utility.AppConfig.KEY_USER_ID;
import static com.travelur.utility.AppConfig.KEY_WALL_ID;


/*
 * @author by Abhijit .
 */

public class VolleyRequest {

    private static ProgressDialog pDialog;
    private static Context context;
    private static String NAME = null;
    private static String LAST_NAME = null;
    private static String EMAIL = null;
    private static String USER_ID = null;
    private static String PASSWORD = null;
    private static String USERNAME = null;
    private static String MOBILENO = null;
    private static String MESSAGE = null;
    private static String WALL_ID = null;
    private static String GROUP_ID = null;
    private static String COMMENT = null;
    private static String GROUP_NAME = null;
    private static String GROUP_DESC = null;
    private static String IMAGEPATH = null;
    private static String TYPE = null;
    private static String ID = null;
    private static final String boundary = "apiclient-" + System.currentTimeMillis();
    private static List<String> IMAGEPATH_LIST;

    private static String FIRST_NAME = null;
    private static String COUNTRY_NAME = null;
    private static String PIN_CODE = null;
    private static String ADDRESS = null;
    private static String STATE = null;
    private static String COUNTRY_CODE = null;
    private static String DATE_OF_BIRTH = null;
    private static String PHONE = null;
    private static String HOME_AIRPORT = null;
    private static String IMAGE = null;
    private static String CITY = null;



    private static SessionManager session;
    private static SQLiteHandler db;
    private static RecyclerView.Adapter volleyAdapter;
    private static QuestionListAdapter volleyQuestionListAdapter;
    private static SwipeRefreshLayout volleySwipeRefreshLayout;

    public VolleyRequest(Context context) {
        this.context = context;
    }

    public static void signedInHome_Profile(final JSONObject jsonObject, final RecyclerView.Adapter adapter, final SwipeRefreshLayout swipeRefreshLayout, final TextView profile_name, final ImageView profile_pic){
        // Tag used to cancel the request
        final String  signedInHome_Profile_string_req = "signedInHome_Profile_string_req";

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Fetching profile details...");
        //pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("profile"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {
                                // user successfully Registered

                                JSONObject profile_details = jObj.optJSONObject("profile_details");
                                String user_id = profile_details.optString("user_id");
                                String image = profile_details.optString("image");
                                String first_name = profile_details.optString("first_name");
                                String last_name = profile_details.optString("last_name");
                                String country_name = profile_details.optString("country_name");
                                String pin_code = profile_details.optString("pin_code");
                                String address = profile_details.optString("address");
                                String state = profile_details.optString("state");
                                String country_code = profile_details.optString("country_code");
                                String date_of_birth = profile_details.optString("date_of_birth");
                                String phone = profile_details.optString("phone");
                                String home_airport = profile_details.optString("home_airport");
                                String city = profile_details.optString("city");
                                String user_image_path = profile_details.optString("user_image_path");

                                signedInHome_Travel_Connect(user_id, adapter, swipeRefreshLayout);
                                profile_name.setText(first_name);
                                Glide.with(context)
                                        .load(user_image_path)
                                        .crossFade()
                                        .placeholder(R.drawable.profile_placeholder)
                                        //.error(R.drawable.error_icon)
                                        .bitmapTransform(new GlideCircleTransformation(context))
                                        .diskCacheStrategy(DiskCacheStrategy.ALL)
                                        .into(profile_pic);

                            } else {
                                // Error in Registeration. Get the error message
                                String data = jObj.optString("message");
                                Toast.makeText(context,
                                        data, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }

                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_string_req);
    }

    public static void signUpUser(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signUpUser_string_req = "signUpUser_string_req";

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_NAME) && jsonObject1.has(KEY_LASTNAME) && jsonObject1.has(KEY_EMAIL))
                {
                    NAME = jsonObject1.get(KEY_NAME).toString();
                    LAST_NAME = jsonObject1.get(KEY_LASTNAME).toString();
                    EMAIL = jsonObject1.get(KEY_EMAIL).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Registering...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("register_on_light_box"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signUpUser_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {
                                // user successfully Registered

                                String data = jObj.getString("data");
                                String user_id = jObj.getString("user_id");

                                // Launch Sign_In Layout
                                if(context instanceof Activity){
                                    ((Activity) context).findViewById(R.id.signUp_layout).setVisibility(View.GONE);
                                    ((Activity) context).findViewById(R.id.signIn_layout).setVisibility(View.VISIBLE);}

                            } else {
                                // Error in Registeration. Get the error message
                                String data = jObj.getString("data");
                                Toast.makeText(context,
                                        data, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }

                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signUpUser_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_NAME, NAME);
                params.put(KEY_LASTNAME,LAST_NAME);
                params.put(KEY_EMAIL, EMAIL);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signUpUser_string_req);
    }

    public static void setPasswordUser(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  setPasswordUser_string_req = "setPasswordUser_string_req";
        // SQLite database handler
        db = new SQLiteHandler(context);
        // Session manager
        session = new SessionManager(context);

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_PASSWORD) && jsonObject1.has(KEY_CONFIRM_PASSWORD))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                    PASSWORD = jsonObject1.get(KEY_PASSWORD).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Setting Password...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("create_password_mobile"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(setPasswordUser_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");
                            if (status) {
                                // user successfully logged in
                                // Create login session
                                session.setLogin(true);

                                // User successfully stored in MySQL
                                // Now store the user in sqlite
                                String user_id = jObj.getString("user_id");
                                String first_name = jObj.getString("first_name");
                                String last_name = jObj.getString("last_name");

                                // Inserting row in users table
                                db.addUser(status, user_id, first_name, last_name);

                                Toast.makeText(context, "Password set successfully.", Toast.LENGTH_LONG).show();

                                // Launch login activity
                                Intent intent = new Intent(
                                        context,
                                        MainActivity.class);
                                intent.putExtra("Activity","StartupScreen_Set_Password");
                                intent.putExtra("status",status);
                                context.startActivity(intent);
                                //finish();
                                if(context instanceof Activity){
                                    ((Activity)context).finish(); }
                            } else {

                                // Error occurred in set Password. Get the error
                                // message
                                String errorMsg = jObj.getString("status");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Toast.makeText(context,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(setPasswordUser_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                params.put(KEY_PASSWORD,PASSWORD);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, setPasswordUser_string_req);
    }

    public static void signInUser(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signInUser_string_req = "signInUser_string_req";

        // SQLite database handler
        db = new SQLiteHandler(context);
        // Session manager
        session = new SessionManager(context);

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USERNAME) && jsonObject1.has(KEY_PASSWORD))
                {
                    USERNAME = jsonObject1.get(KEY_USERNAME).toString();
                    PASSWORD = jsonObject1.get(KEY_PASSWORD).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("SigningIn...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("login"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signInUser_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {
                                // user successfully logged in
                                // Create login session
                                session.setLogin(true);

                                // Now store the user in SQLite
                                String user_id = jObj.getString("user_id");
                                String first_name = jObj.getString("first_name");
                                String last_name = jObj.getString("last_name");

                                // Inserting row in users table
                                db.addUser(status, user_id, first_name, last_name);
                                AppConfig.setUser_id(user_id);

                                // Launch main activity
                                Intent intent = new Intent(context,
                                        MainActivity.class);
                                context.startActivity(intent);
                                if(context instanceof Activity){
                                    ((Activity)context).finish(); }
                            } else {
                                // Error in login. Get the error message
                                String data = jObj.getString("data");
                                Toast.makeText(context,
                                        data, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signInUser_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USERNAME, USERNAME);
                params.put(KEY_PASSWORD,PASSWORD);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signInUser_string_req);
    }

    public static void forgotPasswordUser(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  forgotPasswordUser_string_req = "forgotPasswordUser_string_req";

        // SQLite database handler
        db = new SQLiteHandler(context);
        // Session manager
        session = new SessionManager(context);

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_EMAIL))
                {
                    EMAIL = jsonObject1.get(KEY_EMAIL).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Sending Mail...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("forgot_password"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(forgotPasswordUser_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {
                                // user successfully sent reset password mail

                                String data = jObj.getString("data");

                                // Launch Sign_In Layout
                                if(context instanceof Activity){
                                    ((Activity) context).findViewById(R.id.forgetPassword_layout).setVisibility(View.GONE);
                                    ((Activity) context).findViewById(R.id.signIn_layout).setVisibility(View.VISIBLE);}
                            } else {
                                // Error in login. Get the error message
                                String data = jObj.getString("data");
                                Toast.makeText(context,
                                        data, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(forgotPasswordUser_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_EMAIL, EMAIL);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, forgotPasswordUser_string_req);
    }

    public static void signUpGuestLogin(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signUpGuestLogin_string_req = "signUpGuestLogin_string_req";

        // SQLite database handler
        db = new SQLiteHandler(context, true);
        // Session manager
        session = new SessionManager(context);

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USERNAME) && jsonObject1.has(KEY_MOBILENO))
                {
                    USERNAME = jsonObject1.get(KEY_USERNAME).toString();
                    MOBILENO = jsonObject1.get(KEY_MOBILENO).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Signing In Guest...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("register_guest_user"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signUpGuestLogin_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {
                                // user successfully logged in
                                // Create login session
                                session.setGuestLogin(true);

                                // Now store the user in SQLite
                                String user_id = jObj.getString("user_id");
                                String mobilenumber = jObj.getString("mobilenumber");
                                String username = jObj.getString("username");

                                // Inserting row in users table
                                db.addUser(status, user_id, username, mobilenumber);

                                // Launch main activity
                                // Launch main activity
                                Intent intent = new Intent(context,
                                        MainActivity.class);
                                context.startActivity(intent);
                                if(context instanceof Activity){
                                    ((Activity)context).finish(); }
                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signUpGuestLogin_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USERNAME, USERNAME);
                params.put(KEY_MOBILENO,MOBILENO);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signUpGuestLogin_string_req);
    }

    public static void signedInHome_Travel_Connect(String user_id, RecyclerView.Adapter adapter, SwipeRefreshLayout swipeRefreshLayout){
        volleyAdapter = adapter;
        volleySwipeRefreshLayout = swipeRefreshLayout;
        // Tag used to cancel the request
        final String  signedInHome_Travel_Connect = "signedInHome_Travel_Connect";

        if(null!=user_id){

            USER_ID = user_id;
            if(null != AppConfig.home_List)
                AppConfig.home_List.clear();
        }

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("travelconnect"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Travel_Connect, response.toString());

                        //Home home = new Home();
                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.optBoolean("status");

                            List<String> images_List = null;
                            List<String> videos_List = null;

                            // Check for error node in json
                            if (status) {

                                JSONObject data_jsonObject = jObj.optJSONObject("data");
                                JSONArray result_jsonArray = data_jsonObject.optJSONArray("result");
                                if(null != result_jsonArray)
                                {
                                    for(int i = 0; i<result_jsonArray.length(); i++){
                                        JSONObject result_jsonArray_jsonObject = result_jsonArray.optJSONObject(i);
                                        String message = result_jsonArray_jsonObject.optString("message");
                                        String user_id = result_jsonArray_jsonObject.optString("user_id");
                                        String first_name = result_jsonArray_jsonObject.optString("first_name");
                                        String value = result_jsonArray_jsonObject.optString("value");
                                        String type = result_jsonArray_jsonObject.optString("type");
                                        String likes = result_jsonArray_jsonObject.optString("likes");
                                        String created_date = result_jsonArray_jsonObject.optString("created_date");
                                        String post_id = result_jsonArray_jsonObject.optString("post_id");
                                        String comments_count = result_jsonArray_jsonObject.optString("comments_count");
                                        String user_image = result_jsonArray_jsonObject.optString("user_image");
                                        String images = result_jsonArray_jsonObject.optString("images");
                                        if(null!=images){
                                            images_List = Arrays.asList(images.split(","));
                                        }
                                        String videos = result_jsonArray_jsonObject.optString("video");
                                        if(null!=videos){
                                            videos_List = Arrays.asList(videos.split(","));
                                        }

                                        /*home.setMessage(message);
                                        home.setUser_id(user_id);
                                        home.setFirst_name(first_name);
                                        home.setValue(value);
                                        home.setType(type);
                                        home.setLikes(likes);
                                        home.setCreated_date(created_date);
                                        home.setPost_id(post_id);
                                        home.setComments_count(comments_count);
                                        home.setUser_image(user_image);
                                        home.setImages(images_List);
                                        home.setVideos(videos_List);*/

                                        AppConfig.home_List.add(new Home(message, user_id, first_name, value, type, likes, created_date,  post_id, comments_count, user_image, images_List, videos_List));

                                    }
                                    // notifying list adapter about data changes
                                    // so that it renders the list view with updated data
                                    volleyAdapter.notifyDataSetChanged();
                                }

                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                        volleySwipeRefreshLayout.setRefreshing(false);
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        volleySwipeRefreshLayout.setRefreshing(false);
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Travel_Connect, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Travel_Connect);
    }

    public static void signedInHome_Like(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  travelConnect_Like_Post_string_req = "travelConnect_Like_Post_string_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_TYPE) && jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_ID))
                {
                    TYPE = jsonObject1.get(KEY_TYPE).toString();
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                    ID = jsonObject1.get(KEY_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("like"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(travelConnect_Like_Post_string_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            String status = jObj.optString("status");

                            // Check for error node in json
                            if (status.equals("0") || status.equals("1")) {
                                String data = jObj.optString("data");
                                Toast.makeText(context,
                                        data, Toast.LENGTH_LONG).show();
                            } else {
                                // Error in login. Get the error message
                                String data = jObj.optString("data");
                                Toast.makeText(context,
                                        data, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, response.toString(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(travelConnect_Like_Post_string_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_TYPE, TYPE);
                params.put(KEY_USER_ID,USER_ID);
                params.put(KEY_ID,ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, travelConnect_Like_Post_string_req);
    }

    public static void signedInHome_Comment(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Comment_string_req = "signedInHome_Comment_string_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_ID) && jsonObject1.has(KEY_COMMENT))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                    ID = jsonObject1.get(KEY_ID).toString();
                    COMMENT = jsonObject1.get(KEY_COMMENT).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("comment"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Comment_string_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                String success = data.optString("success");

                                // Launch main activity
                                //finish();
                                if(context instanceof Activity){
                                    ((Activity)context).finish(); }
                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Comment_string_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                params.put(KEY_ID,ID);
                params.put(KEY_COMMENT,COMMENT);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Comment_string_req);
    }

    public static void signedInHome_Share(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Share_string_req = "signedInHome_Share_string_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_ID))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                    ID = jsonObject1.get(KEY_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("share"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Share_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {
                                // user successfully logged in
                                // Create login session
                                session.setLogin(true);

                                // Now store the user in SQLite
                                JSONObject data = jObj.optJSONObject("data");
                                String success = data.getString("success");
                                String message = jObj.getString("message");
                                Toast.makeText(context, message.toString(), Toast.LENGTH_LONG).show();

                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Share_string_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                params.put(KEY_ID,ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Share_string_req);
    }

    public static void signedInHome_Edit(JSONObject jsonObject, boolean isImage){
        final boolean isImage_data = isImage;
        // Tag used to cancel the request
        final String  signedInHome_Edit_Multipart_req = "signedInHome_Edit_Multipart_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                JSONArray jsonArray1;
                IMAGEPATH_LIST = new ArrayList<String>();
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_IMAGEPATH) && jsonObject1.has(KEY_MESSAGE) && jsonObject1.has(KEY_WALL_ID) && jsonObject1.has(KEY_GROUP_ID))
                {
                    USER_ID = jsonObject1.optString(KEY_USER_ID);
                    jsonArray1 = jsonObject1.optJSONArray(KEY_IMAGEPATH);
                    for (int i=0; i<jsonArray1.length(); i++) {
                        IMAGEPATH_LIST.add(jsonArray1.getString(i));
                    }
                    MESSAGE = jsonObject1.optString(KEY_MESSAGE);
                    WALL_ID = jsonObject1.optString(KEY_WALL_ID);
                    GROUP_ID = jsonObject1.optString(KEY_GROUP_ID);
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        final VolleyMultipartRequest stringRequest = new VolleyMultipartRequest(Request.Method.POST, BASE_URL.concat("edit"),
                new Response.Listener<String>() {

                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Edit_Multipart_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                String message = data.optString("message");
                                String post_id = data.optString("post_id");

                            } else {
                                // Error in postdata
                                String errorMsg = jObj.optJSONObject("data").toString();
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Edit_Multipart_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                params.put(KEY_MESSAGE,MESSAGE);
                params.put(KEY_WALL_ID, WALL_ID);
                params.put(KEY_GROUP_ID,GROUP_ID);
                return params;
            }
            @Override
            protected Map<String, DataPart> getByteData() {
                Map<String, DataPart> params = new HashMap<>();
                // file name could found file base or direct access from real path
                // for now just get bitmap data from ImageView


                for(int i = 0 ; i< IMAGEPATH_LIST.size() ; i++) {
                    if(isImage_data) {
                        params.put("userFiles[" + i + "]", new DataPart("file.jpg", AppHelper.getFileDataFromImagePath(context, IMAGEPATH_LIST.get(i)), "image/jpeg"));
                    }else{
                        try {
                            params.put("userFiles[" + i + "]", new DataPart("file.mp4", AppHelper.getFileDataFromVideoPath(context, IMAGEPATH_LIST.get(i)), "video/mp4"));

                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                return params;
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Edit_Multipart_req);
    }

    public static void signedInHome_Delete(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Delete_string_req = "signedInHome_Delete_string_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_TYPE) && jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_ID))
                {
                    TYPE = jsonObject1.get(KEY_TYPE).toString();
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                    ID = jsonObject1.get(KEY_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("delete"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Delete_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                String success = data.optString("success");

                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Delete_string_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_TYPE, TYPE);
                params.put(KEY_USER_ID,USER_ID);
                params.put(KEY_ID,ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Delete_string_req);
    }

    public static void signedInHome_Add_Post(JSONObject jsonObject, boolean isImage){
        final boolean isImage_data = isImage;
        // Tag used to cancel the request
        final String  signedInHome_Add_Post_Multipart_req = "signedInHome_Add_Post_Multipart_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                JSONArray jsonArray1;
                IMAGEPATH_LIST = new ArrayList<String>();
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_IMAGEPATH) && jsonObject1.has(KEY_MESSAGE) && jsonObject1.has(KEY_WALL_ID) && jsonObject1.has(KEY_GROUP_ID))
                {
                    USER_ID = jsonObject1.optString(KEY_USER_ID);
                    jsonArray1 = jsonObject1.optJSONArray(KEY_IMAGEPATH);
                    for (int i=0; i<jsonArray1.length(); i++) {
                        IMAGEPATH_LIST.add(jsonArray1.getString(i));
                    }
                    MESSAGE = jsonObject1.optString(KEY_MESSAGE);
                    WALL_ID = jsonObject1.optString(KEY_WALL_ID);
                    GROUP_ID = jsonObject1.optString(KEY_GROUP_ID);
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        final VolleyMultipartRequest stringRequest = new VolleyMultipartRequest(Request.Method.POST, BASE_URL.concat("add_post"),
                new Response.Listener<String>() {


                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Add_Post_Multipart_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                String message = data.optString("message");
                                String post_id = data.optString("post_id");

                            } else {
                                // Error in postdata
                                String errorMsg = jObj.optJSONObject("data").toString();
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Add_Post_Multipart_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                params.put(KEY_MESSAGE,MESSAGE);
                params.put(KEY_WALL_ID, WALL_ID);
                params.put(KEY_GROUP_ID,GROUP_ID);
                return params;
            }
            @Override
            protected Map<String, DataPart> getByteData() {
                Map<String, DataPart> params = new HashMap<>();
                // file name could found file base or direct access from real path
                // for now just get bitmap data from ImageView


                for(int i = 0 ; i< IMAGEPATH_LIST.size() ; i++) {
                    if(isImage_data) {
                        params.put("userFiles[" + i + "]", new DataPart("file.jpg", AppHelper.getFileDataFromImagePath(context, IMAGEPATH_LIST.get(i)), "image/jpeg"));
                    }else{
                        try {
                            params.put("userFiles[" + i + "]", new DataPart("file.mp4", AppHelper.getFileDataFromVideoPath(context, IMAGEPATH_LIST.get(i)), "video/mp4"));

                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                return params;
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Add_Post_Multipart_req);
    }

    public static void signedInHome_Profile_TravelConnectProfile(JSONObject jsonObject, RecyclerView.Adapter adapter, final ImageView edit_profile_pic, final TextView profile_name, final TextView place, final TextView post_count, final TextView photos_count, final TextView videos_count, final TextView friends_count, final TextView groups_count, final ProgressBar profile_percentage){
        // Tag used to cancel the request
        final String  signedInHome_Profile_TravelConnectProfile_string_req = "signedInHome_Profile_TravelConnectProfile_string_req";

        volleyAdapter = adapter;
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("travelconnectprofile"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_TravelConnectProfile_string_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.optBoolean("status");

                            List<String> images_List = null;
                            List<String> videos_List = null;

                            // Check for error node in json
                            if (status) {

                                JSONObject data_jsonObject = jObj.optJSONObject("data");
                                JSONObject profile_details = jObj.optJSONObject("profile_details");
                                JSONObject posts_count = jObj.optJSONObject("posts_count");
                                JSONObject friend_count = jObj.optJSONObject("friends_count");
                                JSONObject group_count = jObj.optJSONObject("group_count");
                                JSONObject photo_count = jObj.optJSONObject("photos_count");
                                JSONObject video_count = jObj.optJSONObject("videos_count");
                                JSONArray result_jsonArray = data_jsonObject.optJSONArray("result");
                                if(null != profile_details)
                                {
                                    String user_id = profile_details.optString("user_id");
                                    String image = profile_details.optString("image");
                                    String first_name = profile_details.optString("first_name");
                                    String last_name = profile_details.optString("last_name");
                                    String country_name = profile_details.optString("country_name");
                                    String pin_code = profile_details.optString("pin_code");
                                    String profile_per = profile_details.optString("profile_percentage");
                                    String address = profile_details.optString("address");
                                    String state = profile_details.optString("state");
                                    String country_code = profile_details.optString("country_code");
                                    String date_of_birth = profile_details.optString("date_of_birth");
                                    String phone = profile_details.optString("phone");
                                    String home_airport = profile_details.optString("home_airport");
                                    String city = profile_details.optString("city");
                                    String user_image_path = profile_details.optString("user_image_path");

                                    String postcount = posts_count.optString("cpost");
                                    String friendscount = friend_count.optString("friends_count");
                                    String groupcount = group_count.optString("group_count");
                                    String photoscount = photo_count.optString("photos_count");
                                    String videoscount = video_count.optString("videos_count");

                                    Glide.with(context)
                                            .load(user_image_path)
                                            .crossFade()
                                            .placeholder(R.drawable.profile_placeholder)
                                            .error(R.drawable.error_icon)
                                            .bitmapTransform(new GlideCircleTransformation(context))
                                            .diskCacheStrategy(DiskCacheStrategy.ALL)
                                            .into(edit_profile_pic);

                                    profile_name.setText(first_name+" "+last_name);
                                    place.setText(city+", "+state);
                                    post_count.setText(postcount);
                                    friends_count.setText(friendscount);
                                    photos_count.setText(photoscount);
                                    videos_count.setText(videoscount);
                                    groups_count.setText(groupcount);

                                    profile_percentage.setProgress(Integer.parseInt(profile_per.substring(0,profile_per.length()-1)));

                                    AppConfig.account_setting_List.add(new AccountSettingsDataModel(user_image_path, first_name, last_name, country_code, phone, date_of_birth, home_airport, country_name, pin_code, address, city, state));
                                }

                                if(null != result_jsonArray)
                                {
                                    for(int i = 0; i<result_jsonArray.length(); i++){
                                        JSONObject result_jsonArray_jsonObject = result_jsonArray.optJSONObject(i);
                                        String message = result_jsonArray_jsonObject.optString("message");
                                        String user_id = result_jsonArray_jsonObject.optString("user_id");
                                        String first_name = result_jsonArray_jsonObject.optString("first_name");
                                        String value = result_jsonArray_jsonObject.optString("value");
                                        String type = result_jsonArray_jsonObject.optString("type");
                                        String likes = result_jsonArray_jsonObject.optString("likes");
                                        String created_date = result_jsonArray_jsonObject.optString("created_date");
                                        String post_id = result_jsonArray_jsonObject.optString("post_id");
                                        String comments_count = result_jsonArray_jsonObject.optString("comments_count");
                                        String user_image = result_jsonArray_jsonObject.optString("user_image");
                                        String images = result_jsonArray_jsonObject.optString("images");
                                        if(null!=images){
                                            images_List = Arrays.asList(images.split(","));
                                        }
                                        String videos = result_jsonArray_jsonObject.optString("video");
                                        if(null!=videos){
                                            videos_List = Arrays.asList(videos.split(","));
                                        }
                                        AppConfig.home_List.add(new Home(message, user_id, first_name, value, type, likes, created_date,  post_id, comments_count, user_image, images_List, videos_List));

                                }

                                // notifying list adapter about data changes
                                // so that it renders the list view with updated data
                                volleyAdapter.notifyDataSetChanged();
                            }

                        }else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }

                }catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                        volleySwipeRefreshLayout.setRefreshing(false);
                    }
    },
            new Response.ErrorListener() {
        @Override
        public void onErrorResponse(VolleyError error) {
            volleySwipeRefreshLayout.setRefreshing(false);
            //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
            VolleyLog.d(signedInHome_Profile_TravelConnectProfile_string_req, "Error: " + error.getMessage());
        }
    }){
        @Override
        protected Map<String,String> getParams(){
            Map<String,String> params = new HashMap<String, String>();
            params.put(KEY_USER_ID, USER_ID);
            return params;
        }
        @Override
        public String getBodyContentType() {
            return "application/x-www-form-urlencoded; charset=UTF-8";
        }

    };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

    // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_TravelConnectProfile_string_req);
}

    public static void signedInHome_Profile_Photos(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Profile_Photos_string_req = "signedInHome_Profile_Photos_string_req";

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Showing Photos...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("urphotos"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_Photos_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                JSONObject user_image_object = data.optJSONObject("");
                                String urphotos = user_image_object.optString("user_image");

                            } else {
                                // Error in downloading. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_Photos_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_Photos_string_req);
    }

    public static void signedInHome_Profile_Videos(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Profile_Videos_string_req = "signedInHome_Profile_Videos_string_req";

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }


        pDialog.setMessage("Showing Videos...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("urvideos"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_Videos_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                JSONObject user_image_object = data.optJSONObject("");
                                String urphotos = user_image_object.optString("user_image");

                            } else {
                                // Error in downloading. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_Videos_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_Videos_string_req);
    }

    public static void signedInHome_Profile_Friends(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Profile_Friends_string_req = "signedInHome_Profile_Friends_string_req";

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Showing Friends...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("urfriends"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_Friends_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                // Now store the user in SQLite
                                JSONObject data = jObj.optJSONObject("data");
                                JSONArray my_friends = data.optJSONArray("my_friends");
                                String message = jObj.optString("message");

                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_Friends_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_Friends_string_req);
    }

    public static void signedInHome_Profile_UploadPhotos(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Profile_UploadPhotos_Multipart_req = "signedInHome_Profile_UploadPhotos_Multipart_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                JSONArray jsonArray1;
                IMAGEPATH_LIST = new ArrayList<String>();
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_IMAGEPATH))
                {
                    USER_ID = jsonObject1.optString(KEY_USER_ID);
                    jsonArray1 = jsonObject1.optJSONArray(KEY_IMAGEPATH);
                    for (int i=0; i<jsonArray1.length(); i++) {
                        IMAGEPATH_LIST.add(jsonArray1.getString(i));
                    }
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        final VolleyMultipartRequest stringRequest = new VolleyMultipartRequest(Request.Method.POST, BASE_URL.concat("upload_images"),
                new Response.Listener<String>() {


                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_UploadPhotos_Multipart_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                String message = data.optString("message");

                            } else {
                                // Error in postdata
                                String errorMsg = jObj.optJSONObject("data").toString();
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_UploadPhotos_Multipart_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            protected Map<String, DataPart> getByteData() {
                Map<String, DataPart> params = new HashMap<>();
                // file name could found file base or direct access from real path
                // for now just get bitmap data from ImageView


                for(int i = 0 ; i< IMAGEPATH_LIST.size() ; i++) {
                    params.put("userFiles[" + i + "]", new DataPart("file.jpg", AppHelper.getFileDataFromImagePath(context, IMAGEPATH_LIST.get(i)), "image/jpeg"));
                }
                return params;
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_UploadPhotos_Multipart_req);
    }

    public static void signedInHome_Profile_UploadVideos(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Profile_UploadVideos_Multipart_req = "signedInHome_Profile_UploadVideos_Multipart_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                JSONArray jsonArray1;
                IMAGEPATH_LIST = new ArrayList<String>();
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_IMAGEPATH))
                {
                    USER_ID = jsonObject1.optString(KEY_USER_ID);
                    jsonArray1 = jsonObject1.optJSONArray(KEY_IMAGEPATH);
                    for (int i=0; i<jsonArray1.length(); i++) {
                        IMAGEPATH_LIST.add(jsonArray1.getString(i));
                    }
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        final VolleyMultipartRequest stringRequest = new VolleyMultipartRequest(Request.Method.POST, BASE_URL.concat("upload_images"),
                new Response.Listener<String>() {


                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_UploadVideos_Multipart_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                String message = data.optString("message");

                            } else {
                                // Error in postdata
                                String errorMsg = jObj.optJSONObject("data").toString();
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_UploadVideos_Multipart_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            protected Map<String, DataPart> getByteData() {
                Map<String, DataPart> params = new HashMap<>();
                // file name could found file base or direct access from real path
                // for now just get bitmap data from ImageView


                for(int i = 0 ; i< IMAGEPATH_LIST.size() ; i++) {
                    try {
                        params.put("userFiles[" + i + "]", new DataPart("file.mp4", AppHelper.getFileDataFromVideoPath(context, IMAGEPATH_LIST.get(i)), "video/mp4"));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                return params;
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_UploadVideos_Multipart_req);
    }

    public static void signedInHome_Profile_CreateGroup(JSONObject jsonObject){

        // Tag used to cancel the request
        final String  signedInHome_Profile_CreateGroup_Multipart_req = "signedInHome_Profile_CreateGroup_Multipart_req";

        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                JSONArray jsonArray1;
                IMAGEPATH_LIST = new ArrayList<String>();
                if(jsonObject1.has(KEY_USER_ID) && jsonObject1.has(KEY_GROUP_NAME) && jsonObject1.has(KEY_GROUP_DESC) && jsonObject1.has(KEY_IMAGEPATH))
                {
                    USER_ID = jsonObject1.optString(KEY_USER_ID);
                    jsonArray1 = jsonObject1.optJSONArray(KEY_IMAGEPATH);
                    for (int i=0; i<jsonArray1.length(); i++) {
                        IMAGEPATH_LIST.add(jsonArray1.getString(i));
                    }
                    GROUP_ID = jsonObject1.optString(KEY_GROUP_ID);
                    GROUP_DESC = jsonObject1.optString(KEY_GROUP_DESC);
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        final VolleyMultipartRequest stringRequest = new VolleyMultipartRequest(Request.Method.POST, BASE_URL.concat("creategroup"),
                new Response.Listener<String>() {


                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_CreateGroup_Multipart_req, response.toString());

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {

                                JSONObject data = jObj.optJSONObject("data");
                                String group_id = data.optString("group_id");

                            } else {
                                // Error in postdata
                                String errorMsg = jObj.optJSONObject("data").toString();
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_CreateGroup_Multipart_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                params.put(KEY_GROUP_ID, GROUP_ID);
                params.put(KEY_GROUP_DESC, GROUP_DESC);
                return params;
            }
            @Override
            protected Map<String, DataPart> getByteData() {
                Map<String, DataPart> params = new HashMap<>();
                // file name could found file base or direct access from real path
                // for now just get bitmap data from ImageView

                for(int i = 0 ; i< IMAGEPATH_LIST.size() ; i++) {
                    params.put("banner_image", new DataPart("file.jpg", AppHelper.getFileDataFromImagePath(context, IMAGEPATH_LIST.get(i)), "image/jpeg"));
                }
                return params;
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_CreateGroup_Multipart_req);
    }

    public static void signedInHome_Profile_URGroup(JSONObject jsonObject){
        // Tag used to cancel the request
        final String  signedInHome_Profile_URGroup_string_req = "signedInHome_Profile_URGroup_string_req";


        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("urgroup"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(signedInHome_Profile_URGroup_string_req, response.toString());

                        //Home home = new Home();
                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.optBoolean("status");

                            List<String> images_List = null;
                            List<String> videos_List = null;

                            // Check for error node in json
                            if (status) {

                                JSONObject data_jsonObject = jObj.optJSONObject("data");
                                JSONArray result_jsonArray = data_jsonObject.optJSONArray("my_friends");
                                if(null != result_jsonArray)
                                {
                                    for(int i = 0; i<result_jsonArray.length(); i++){
                                        JSONObject result_jsonArray_jsonObject = result_jsonArray.optJSONObject(i);
                                        String user_id = result_jsonArray_jsonObject.optString("user_id");
                                        String group_name = result_jsonArray_jsonObject.optString("first_name");
                                        String group_pic = result_jsonArray_jsonObject.optString("value");
                                        String group_desc = result_jsonArray_jsonObject.optString("type");
                                        String group_id = result_jsonArray_jsonObject.optString("likes");
                                        String group_slug = result_jsonArray_jsonObject.optString("created_date");
                                        String group_image_path = result_jsonArray_jsonObject.optString("post_id");

                                        /*home.setMessage(message);
                                        home.setUser_id(user_id);
                                        home.setFirst_name(first_name);
                                        home.setValue(value);
                                        home.setType(type);
                                        home.setLikes(likes);
                                        home.setCreated_date(created_date);
                                        home.setPost_id(post_id);
                                        home.setComments_count(comments_count);
                                        home.setUser_image(user_image);
                                        home.setImages(images_List);
                                        home.setVideos(videos_List);*/

                                        AppConfig.group_List.add(new Profile(user_id, group_name, group_pic, group_desc, group_id, group_slug,  group_image_path));

                                    }
                                    // notifying list adapter about data changes
                                    // so that it renders the list view with updated data
                                    volleyAdapter.notifyDataSetChanged();
                                }

                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }
                        volleySwipeRefreshLayout.setRefreshing(false);
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        volleySwipeRefreshLayout.setRefreshing(false);
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(signedInHome_Profile_URGroup_string_req, "Error: " + error.getMessage());
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, signedInHome_Profile_URGroup_string_req);
    }

    public static void settings_Your_Prefernces(JSONObject jsonObject, QuestionListAdapter adapter, SwipeRefreshLayout swipeRefreshLayout){
        volleyQuestionListAdapter = adapter;
        volleySwipeRefreshLayout = swipeRefreshLayout;
        // Tag used to cancel the request
        final String  settings_Your_Prefernces = "settings_Your_Prefernces";

        StringRequest stringRequest = new StringRequest(Request.Method.GET, BASE_URL.concat("question_list"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(settings_Your_Prefernces, response.toString());

                        //Home home = new Home();
                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.optBoolean("status");

                            List<String> option_List = null;

                            // Check for error node in json
                            if (status) {

                                JSONObject data_jsonObject = jObj.optJSONObject("data");
                                for(int i=1; i<=20; i++){

                                }
                                if(null != data_jsonObject) {
                                    for (int i = 1; i <= 20; i++) {
                                        JSONObject result_jsonObject = data_jsonObject.optJSONObject(i+"");
                                        String qid = result_jsonObject.optString("qid");
                                        String question = result_jsonObject.optString("question");
                                        String question_type = result_jsonObject.optString("question_type");
                                        String options = result_jsonObject.optString("options");
                                        if (null != options) {
                                            option_List = Arrays.asList(options.split(","));
                                        }
                                        AppConfig.question_List.add(new YourPreferencesDataModel(qid, question, question_type, option_List));
                                    }
                                    // notifying list adapter about data changes
                                    // so that it renders the list view with updated data
                                    volleyQuestionListAdapter.notifyDataSetChanged();
                                }

                            }else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("data");
                                Toast.makeText(context,
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }

                        } catch (JSONException e1) {
                            e1.printStackTrace();
                        }
                        volleySwipeRefreshLayout.setRefreshing(false);
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        volleySwipeRefreshLayout.setRefreshing(false);
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(settings_Your_Prefernces, "Error: " + error.getMessage());
                    }
                }){

            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };
        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, settings_Your_Prefernces);
    }

    public static void settings_Account_settings(final JSONObject jsonObject){
        // Tag used to cancel the request
        final String  settings_Account_settings_string_req = "settings_Account_settings_string_req";

        pDialog = new ProgressDialog(context);
        try {
            if(null!=jsonObject){
                JSONObject jsonObject1 = new JSONObject(jsonObject.toString());
                if(jsonObject1.has(KEY_USER_ID) && jsonObject.has(KEY_FIRST_NAME) && jsonObject1.has(KEY_LAST_NAME)  && jsonObject1.has(KEY_COUNTRY_NAME) && jsonObject.has(KEY_PIN_CODE) && jsonObject1.has(KEY_ADDRESS) && jsonObject.has(KEY_STATE) && jsonObject1.has(KEY_COUNTRY_CODE) && jsonObject.has(KEY_DATE_OF_BIRTH) && jsonObject1.has(KEY_PHONE) && jsonObject.has(KEY_HOME_AIRPORT) && jsonObject.has(KEY_CITY) && jsonObject.has(KEY_IMAGE))
                {
                    USER_ID = jsonObject1.get(KEY_USER_ID).toString();
                    FIRST_NAME = jsonObject1.get(KEY_FIRST_NAME).toString();
                    LAST_NAME = jsonObject1.get(KEY_LAST_NAME).toString();
                    COUNTRY_NAME = jsonObject1.get(KEY_COUNTRY_NAME).toString();
                    PIN_CODE = jsonObject1.get(KEY_PIN_CODE).toString();
                    ADDRESS = jsonObject1.get(KEY_ADDRESS).toString();
                    STATE = jsonObject1.get(KEY_STATE).toString();
                    COUNTRY_CODE = jsonObject1.get(KEY_COUNTRY_CODE).toString();
                    DATE_OF_BIRTH = jsonObject1.get(KEY_DATE_OF_BIRTH).toString();
                    PHONE = jsonObject1.get(KEY_PHONE).toString();
                    HOME_AIRPORT = jsonObject1.get(KEY_HOME_AIRPORT).toString();
                    CITY = jsonObject1.get(KEY_CITY).toString();
                    IMAGE = jsonObject1.get(KEY_IMAGE).toString();

                }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        pDialog.setMessage("Updating profile details...");
        pDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, BASE_URL.concat("editprofile"),
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        //Toast.makeText(StartupScreen.this,response,Toast.LENGTH_LONG).show();
                        Log.d(settings_Account_settings_string_req, response.toString());
                        pDialog.hide();

                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean status = jObj.getBoolean("status");

                            // Check for error node in json
                            if (status) {
                                // user successfully Registered

                                JSONObject message = jObj.optJSONObject("message");

                            } else {
                                // Error in Registeration. Get the error message
                                String data = jObj.optString("message");
                                Toast.makeText(context,
                                        data, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                            Toast.makeText(context, "Json error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                        }

                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        //Toast.makeText(StartupScreen.this,error.toString(),Toast.LENGTH_LONG).show();
                        VolleyLog.d(settings_Account_settings_string_req, "Error: " + error.getMessage());
                        pDialog.hide();
                    }
                }){
            @Override
            protected Map<String,String> getParams(){
                Map<String,String> params = new HashMap<String, String>();
                params.put(KEY_USER_ID, USER_ID);
                params.put(KEY_FIRST_NAME, FIRST_NAME);
                params.put(KEY_COUNTRY_CODE, COUNTRY_CODE);
                params.put(KEY_PHONE, PHONE);
                params.put(KEY_DATE_OF_BIRTH, DATE_OF_BIRTH);
                params.put(KEY_HOME_AIRPORT, HOME_AIRPORT);
                params.put(KEY_COUNTRY_NAME, COUNTRY_NAME);
                params.put(KEY_PIN_CODE, PIN_CODE);
                params.put(KEY_ADDRESS, ADDRESS);
                params.put(KEY_CITY, CITY);
                params.put(KEY_STATE, STATE);
                params.put(KEY_IMAGE, IMAGE);
                params.put(KEY_LAST_NAME, LAST_NAME);
                return params;
            }
            @Override
            public String getBodyContentType() {
                return "application/x-www-form-urlencoded; charset=UTF-8";
            }

        };

        /*RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);*/

        // Adding request to request queue
        AppController.getInstance().addToRequestQueue(stringRequest, settings_Account_settings_string_req);
    }
}
