package com.travelur.signedinhome;

import android.graphics.Typeface;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.travelur.R;
import com.travelur.backend.VolleyRequest;
import com.travelur.signedinhome.adapters.CardAdapter;
import com.travelur.utility.AppConfig;
import com.travelur.utility.GlideCircleTransformation;

import org.json.JSONException;
import org.json.JSONObject;

/*
 * @author by Abhijit .
 */

public class ProfileFragment extends Fragment implements SwipeRefreshLayout.OnRefreshListener, SearchView.OnQueryTextListener, View.OnClickListener {
    ImageView edit_profile_pic, posts_icon, photos_icon,videos_icon,groups_icon,friends_icon,trips_icon,warning_icon,camera_icon,like,comment,share,like_filled,comment_filled;
    private RecyclerView recyclerView;
    private RecyclerView.LayoutManager layoutManager;
    private RecyclerView.Adapter adapter;
    private SwipeRefreshLayout swipeRefreshLayout;
    private JSONObject jsonObject;
    private Toolbar toolbar;
    private TextView emptyView;
    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.profile, null, false);
        setHasOptionsMenu(true);//to activate search option in Menu
        Typeface font = Typeface.createFromAsset(getActivity().getAssets(), "fontawesome-webfont.ttf");
        Typeface font1 = Typeface.createFromAsset(getActivity().getAssets(), "Close.ttf");
        edit_profile_pic = (ImageView) v.findViewById(R.id.edit_profile_pic);
        Glide.with(this)
                .load("http://nuuneoi.com/uploads/source/playstore/cover.jpg")
                .crossFade()
                .placeholder(R.drawable.profile_placeholder)
                .error(R.drawable.error_icon)
                .bitmapTransform(new GlideCircleTransformation(getContext()))
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .into(edit_profile_pic);
        posts_icon = (ImageView) v.findViewById(R.id.posts_icon);
        photos_icon= (ImageView) v.findViewById(R.id.photos_icon);
        videos_icon= (ImageView) v.findViewById(R.id.videos_icon);
        groups_icon= (ImageView) v.findViewById(R.id.groups_icon);
        friends_icon= (ImageView) v.findViewById(R.id.friends_icon);
        camera_icon= (ImageView) v.findViewById(R.id.camera_icon);
        return v;
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        toolbar= (Toolbar) getActivity().findViewById(R.id.toolbar);
        toolbar.setNavigationIcon(R.drawable.ic_action_arrowleft);
        swipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swipeRefreshLayout);
        swipeRefreshLayout.setColorSchemeResources(R.color.colorPrimary, R.color.colorAccent,R.color.Ash_Gray,R.color.colorPrimary);
        recyclerView = (RecyclerView) view.findViewById(R.id.recycler_view);
        emptyView = (TextView) view.findViewById(R.id.empty_view);
        recyclerView.setNestedScrollingEnabled(false);
        recyclerView.setHasFixedSize(false);
        layoutManager = new LinearLayoutManager(view.getContext());
        recyclerView.setLayoutManager(layoutManager);
        //Finally initializing our adapter
        adapter = new CardAdapter(AppConfig.home_List, getActivity().getApplicationContext());
        //Adding adapter to recyclerview
        recyclerView.setItemAnimator(new DefaultItemAnimator());
        recyclerView.setAdapter(adapter);
        swipeRefreshLayout.setOnRefreshListener(this);
        swipeRefreshLayout.post(new Runnable() {
            @Override
            public void run() {
                swipeRefreshLayout.setRefreshing(true);
                //Calling method to get data
                refreshContent();
            }
        });
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.profile_menu, menu);

        final MenuItem item = menu.findItem(R.id.action_search);
        final SearchView searchView = (SearchView) MenuItemCompat.getActionView(item);
        //searchView.setBackground(getResources().getDrawable(R.drawable.bg_white_rounded));
        searchView.setQueryHint("Search");
        //searchView.setIconified(false);
        //searchView.onActionViewExpanded();
        searchView.setOnQueryTextListener(this);
        MenuItemCompat.setOnActionExpandListener(item,
                new MenuItemCompat.OnActionExpandListener() {
                    @Override
                    public boolean onMenuItemActionCollapse(MenuItem item) {
                        // Do something when collapsed
                        //adapter.setFilter(mCountryModel);
                        return true; // Return true to collapse action view
                    }

                    @Override
                    public boolean onMenuItemActionExpand(MenuItem item) {
                        // Do something when expanded
                        return true; // Return true to expand action view
                    }
                });

        /*menu.findItem(R.id.action_your_trips).setIcon(
                new IconDrawable(getActivity().getApplicationContext(), FontAwesomeIcons.fa_ticket)
                        .colorRes(R.color.White)
                        .actionBarSize());*/
    }

    @Override
    public void onRefresh() {
        //Calling method to get data
        swipeRefreshLayout.setRefreshing(true);
        refreshContent();
    }

    @Override
    public boolean onQueryTextChange(String newText) {
       /* final List<CountryModel> filteredModelList = filter(mCountryModel, newText);
        adapter.setFilter(filteredModelList);*/
        //adapter.getFilter().filter(newText);
        return true;
    }

    @Override
    public boolean onQueryTextSubmit(String query) {
        return false;
    }

    private void refreshContent() {
        swipeRefreshLayout.setRefreshing(true);
        jsonObject = new JSONObject();
        try {
            if(null!= AppConfig.getUser_id())
            {
                jsonObject.put("user_id", AppConfig.getUser_id());
                VolleyRequest volleyRequest = new VolleyRequest(getActivity().getApplicationContext());
                volleyRequest.signedInHome_Travel_Connect(jsonObject, adapter, swipeRefreshLayout);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        swipeRefreshLayout.setRefreshing(false);
    }

    private void checEmptyView() {
        if (AppConfig.home_List.isEmpty()) {
            recyclerView.setVisibility(View.GONE);
            emptyView.setVisibility(View.VISIBLE);
        }
        else {
            recyclerView.setVisibility(View.VISIBLE);
            emptyView.setVisibility(View.GONE);
        }
    }

    @Override
    public void onClick(View v) {

    }
}
